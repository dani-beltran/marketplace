// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma-client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    Int        @id @default(autoincrement())
  email                 String     @unique
  emailVerified         DateTime?
  name                  String?
  image                 String?
  role                  String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @default(now()) @updatedAt
  deletedAt             DateTime?
  contractsAsContractor Contract[] @relation("contractor")
  contractsAsClient     Contract[] @relation("client")
  postedJobs            Job[]
  accounts              Account[]
  sessions              Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Contract {
  id           Int       @id @default(autoincrement())
  name         String
  terms        String
  status       String
  startDate    DateTime
  endDate      DateTime
  hourlyRate   String?
  hoursPerWeek Int?
  totalHours   Int?
  totalCost    String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @default(now()) @updatedAt
  deletedAt    DateTime?
  contractor   User      @relation("contractor", fields: [contractorId], references: [id])
  contractorId Int
  client       User      @relation("client", fields: [clientId], references: [id])
  clientId     Int
  job          Job       @relation(fields: [jobId], references: [id])
  jobId        Int       @unique
}

model Job {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  issueUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  deletedAt   DateTime?
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  contract    Contract?
}
